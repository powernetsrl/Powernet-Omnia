/*****************************************************/
/*                      LIBRERIE                     */
/*****************************************************/
#include <WiFi.h>
#include <WiFiManager.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <ArduinoOTA.h>
#include <Preferences.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <HTTPUpdate.h>
#include <esp_wifi.h>
#include <Update.h>

// DHT
#include <DHT.h>
#include <DHT_U.h>

/*****************************************************/
/*              DEFINIZIONE DEI PIN                  */
/*****************************************************/
// Pin HC-SR04
#define TRIG_PIN 27
#define ECHO_PIN 26

// Inputs generici
#define INPUT1_PIN 34
#define INPUT2_PIN 35
#define INPUT3_PIN 36
#define INPUT4_PIN 39

// Uscite (relay/switch)
#define SWITCH1_PIN 19
#define SWITCH2_PIN 21
#define SWITCH3_PIN 22
#define SWITCH4_PIN 23

// DHT11
#define DHT_PIN 4         // Pin dove è collegato il DHT11
#define DHT_TYPE DHT11    // Tipo di sensore DHT

/*****************************************************/
/*        CONFIGURAZIONE THINGSBOARD E VARIABILI     */
/*****************************************************/
// Server ThingsBoard
const char* THINGSBOARD_SERVER = "powernetsrl.ddns.net";
const int   THINGSBOARD_PORT   = 9003;

// Variabile per il token (verrà generato e salvato in modo univoco)
String THINGSBOARD_TOKEN;

// Topic MQTT
const char* TELEMETRY_TOPIC = "v1/devices/me/telemetry";
const char* ATTRIBUTE_TOPIC  = "v1/devices/me/attributes";

// Oggetti WiFi & MQTT
WiFiClient     espClient;
PubSubClient   client(espClient);

// Variabili per HC-SR04 (serbatoio)
long  duration            = 0;
float distance            = 0.0;
float waterLevelPercent   = 0.0;
float tankHeight          = 400.0;  // Altezza serbatoio di default (cm)

// Intervallo di invio dati (in ms)
unsigned long interval             = 10000;
unsigned long previousMillis       = 0;

// Gestione riconnessione MQTT
unsigned long reconnectPreviousMillis = 0;
const long reconnectInterval          = 5000;

// Stato degli switch
bool switch1State = LOW;
bool switch2State = LOW;
bool switch3State = LOW;
bool switch4State = LOW;

// DHT object
DHT dht(DHT_PIN, DHT_TYPE);
float dhtTemperature = 0.0;
float dhtHumidity    = 0.0;

// **Variabile per la versione del firmware**
String firmwareVersion = "1.0.0";

// Preferences per salvare token, parametri, ecc.
Preferences preferences;

// Web server asincrono
AsyncWebServer server(80);

/*****************************************************/
/*          DICHIARAZIONI FUNZIONI UTILI            */
/*****************************************************/
void reconnectMQTT();
void mqttCallback(char* topic, byte* payload, unsigned int length);
void setupOTA();
String generateUniqueCode();
void readUltrasonicSensor();
void readDHTSensor();
void sendData();
void setSwitchState(int pin, bool state, bool &stateVar);
String getHTMLPage();
void handleSetTankHeight(AsyncWebServerRequest *request);

// Funzione di callback per l'upload firmware via web
void handleFirmwareUpload(AsyncWebServerRequest *request, const String& filename,
                          size_t index, uint8_t *data, size_t len, bool final);

/*****************************************************/
/*        GENERAZIONE TOKEN (8 CIFRE) DAL MAC        */
/*****************************************************/
String generateUniqueCode() {
  uint64_t rawMac = ESP.getEfuseMac();       // MAC address (48 bit)
  uint64_t codeVal = rawMac % 100000000ULL;  // Riduciamo a 8 cifre
  char codeStr[9];                           // 8 cifre + terminatore
  snprintf(codeStr, sizeof(codeStr), "%08llu", (unsigned long long)codeVal);
  return String(codeStr);
}

/*****************************************************/
/*                     SETUP                         */
/*****************************************************/
void setup() {
  Serial.begin(115200);

  // 1) Inizializza Preferences e carica/genera token
  preferences.begin("device_prefs", false);
  THINGSBOARD_TOKEN = preferences.getString("uniqueToken", "");
  if (THINGSBOARD_TOKEN == "") {
    THINGSBOARD_TOKEN = generateUniqueCode();
    preferences.putString("uniqueToken", THINGSBOARD_TOKEN);
    Serial.print("Token MQTT generato e salvato: ");
    Serial.println(THINGSBOARD_TOKEN);
  } else {
    Serial.print("Token MQTT caricato: ");
    Serial.println(THINGSBOARD_TOKEN);
  }
  preferences.end();

  // 2) Carichiamo la versione firmware
  preferences.begin("firmware", false);
  firmwareVersion = preferences.getString("version", "1.0.0");
  preferences.end();
  Serial.print("Firmware Version: ");
  Serial.println(firmwareVersion);

  // Pin uscite, ingressi, sensore ultrasonico
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(INPUT1_PIN, INPUT);
  pinMode(INPUT2_PIN, INPUT);
  pinMode(INPUT3_PIN, INPUT);
  pinMode(INPUT4_PIN, INPUT);
  pinMode(SWITCH1_PIN, OUTPUT);
  pinMode(SWITCH2_PIN, OUTPUT);
  pinMode(SWITCH3_PIN, OUTPUT);
  pinMode(SWITCH4_PIN, OUTPUT);

  // Switch inizialmente OFF
  digitalWrite(SWITCH1_PIN, LOW);
  digitalWrite(SWITCH2_PIN, LOW);
  digitalWrite(SWITCH3_PIN, LOW);
  digitalWrite(SWITCH4_PIN, LOW);

  // DHT
  dht.begin();

  // 3) Carichiamo l'altezza serbatoio salvata
  preferences.begin("tank", false);
  tankHeight = preferences.getFloat("height", 400.0);
  preferences.end();
  Serial.print("tankHeight iniziale: ");
  Serial.println(tankHeight);

  // 4) WiFi Manager e avvio WiFi
  String apName = "Powernet_Omnia_" + THINGSBOARD_TOKEN;
  if (apName.length() > 32) {
    apName = apName.substring(0, 32);
  }
  Serial.print("Access Point Name: ");
  Serial.println(apName);

  WiFiManager wifiManager;
  wifiManager.setConfigPortalTimeout(180);  // Timeout di 3 minuti
  if (!wifiManager.autoConnect(apName.c_str())) {
    Serial.println("Connessione WiFi fallita e configurazione fallita");
    ESP.restart();
  }
  Serial.println("Connessione WiFi riuscita");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // 5) MQTT
  client.setServer(THINGSBOARD_SERVER, THINGSBOARD_PORT);

  // **AUMENTIAMO IL BUFFER MQTT** per inviare JSON più grandi
  client.setBufferSize(1024);

  client.setCallback(mqttCallback);

  // 6) OTA
  setupOTA();
  ArduinoOTA.begin();

  // 7) Web server
  // Pagina principale
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/html", getHTMLPage().c_str());
  });

  // Rotta POST per settare altezza serbatoio
  server.on("/setTankHeight", HTTP_POST, handleSetTankHeight);

  // Rotte toggle switch
  server.on("/toggleSwitch1", HTTP_GET, [](AsyncWebServerRequest *request){
    setSwitchState(SWITCH1_PIN, !switch1State, switch1State);
    request->redirect("/");
  });
  server.on("/toggleSwitch2", HTTP_GET, [](AsyncWebServerRequest *request){
    setSwitchState(SWITCH2_PIN, !switch2State, switch2State);
    request->redirect("/");
  });
  server.on("/toggleSwitch3", HTTP_GET, [](AsyncWebServerRequest *request){
    setSwitchState(SWITCH3_PIN, !switch3State, switch3State);
    request->redirect("/");
  });
  server.on("/toggleSwitch4", HTTP_GET, [](AsyncWebServerRequest *request){
    setSwitchState(SWITCH4_PIN, !switch4State, switch4State);
    request->redirect("/");
  });

  // Rotta GET per stati switch in JSON
  server.on("/switchStates", HTTP_GET, [](AsyncWebServerRequest *request){
    StaticJsonDocument<200> doc;
    doc["switch1"] = switch1State;
    doc["switch2"] = switch2State;
    doc["switch3"] = switch3State;
    doc["switch4"] = switch4State;
    String json;
    serializeJson(doc, json);
    request->send(200, "application/json", json);
  });

  // Form upload firmware nella pagina principale: gestiamo la POST su "/update"
  server.on("/update", HTTP_POST, 
    [](AsyncWebServerRequest *request){
      // Completamento della response dopo l'upload
      AsyncWebServerResponse *response = request->beginResponse(
        200, "text/plain",
        (Update.hasError()) ? "Update Failed" : "Update Success! Rebooting..."
      );
      response->addHeader("Connection", "close");
      request->send(response);
      // Se è andato a buon fine, riavviamo
      if (!Update.hasError()) {
        ESP.restart();
      }
    },
    handleFirmwareUpload  // callback che riceve i chunk di dati
  );

  // Avvio server
  server.begin();
  Serial.println("Web server avviato");
}

/*****************************************************/
/*                      LOOP                         */
/*****************************************************/
void loop() {
  ArduinoOTA.handle();

  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Lettura sensori
    readUltrasonicSensor(); 
    readDHTSensor();

    // Invio dati
    sendData();
  }
}

/*****************************************************/
/*        FUNZIONE DI RICONNESSIONE MQTT             */
/*****************************************************/
void reconnectMQTT() {
  unsigned long currentMillis = millis();
  if (currentMillis - reconnectPreviousMillis >= reconnectInterval) {
    reconnectPreviousMillis = currentMillis;
    Serial.print("Tentativo di connessione MQTT...");

    if (client.connect("ESP32Client", THINGSBOARD_TOKEN.c_str(), NULL)) {
      Serial.println("connesso");
      // Sottoscrizione al topic attributi
      if(client.subscribe(ATTRIBUTE_TOPIC)){
        Serial.println("Sottoscritto al topic attributi");
      } else {
        Serial.println("Fallita la sottoscrizione al topic attributi");
      }
    } else {
      Serial.print("fallito, rc=");
      Serial.print(client.state());
      Serial.println(" riprovo tra 5 secondi");
    }
  }
}

/*****************************************************/
/*            CALLBACK MQTT E GESTIONE OTA           */
/*****************************************************/
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Messaggio ricevuto su topic: ");
  Serial.println(topic);

  String messageTemp;
  for (unsigned int i = 0; i < length; i++) {
    messageTemp += (char)payload[i];
  }
  Serial.print("Payload: ");
  Serial.println(messageTemp);

  StaticJsonDocument<512> doc;
  DeserializationError error = deserializeJson(doc, messageTemp);

  if (!error) {
    Serial.println("Deserializzazione JSON riuscita");

    // tankHeight
    if (doc.containsKey("tankHeight")) {
      float newTankHeight = doc["tankHeight"];
      if (newTankHeight >= 10 && newTankHeight <= 400) {
        tankHeight = newTankHeight;
        preferences.begin("tank", false);
        preferences.putFloat("height", tankHeight);
        preferences.end();
        Serial.print("tankHeight aggiornato: ");
        Serial.println(tankHeight);
      } else {
        Serial.println("Valore tankHeight non valido");
      }
    }

    // interval
    if (doc.containsKey("interval")) {
      long newIntervalSec = doc["interval"];
      long newInterval = newIntervalSec * 1000;
      if (newInterval >= 3000 && newInterval <= 3600000) {
        interval = newInterval;
        Serial.print("Nuovo intervallo: ");
        Serial.print(newIntervalSec);
        Serial.println(" secondi");
      } else {
        Serial.println("Intervallo non valido ricevuto");
      }
    }

    // OTA da URL
    if (doc.containsKey("otaUrl")) {
      String url = doc["otaUrl"].as<String>();
      Serial.print("Aggiornamento OTA da URL: ");
      Serial.println(url);

      t_httpUpdate_return ret = httpUpdate.update(espClient, url);
      switch(ret) {
        case HTTP_UPDATE_FAILED:
          Serial.printf("Update Fallito. Errore (%d): %s\n",
                         httpUpdate.getLastError(),
                         httpUpdate.getLastErrorString().c_str());
          break;
        case HTTP_UPDATE_NO_UPDATES:
          Serial.println("Nessun aggiornamento disponibile");
          break;
        case HTTP_UPDATE_OK:
          Serial.println("Aggiornamento completato con successo");
          break;
      }
    }

    // Switch
    if (doc.containsKey("switch1")) {
      bool newSwitch1 = doc["switch1"];
      setSwitchState(SWITCH1_PIN, newSwitch1, switch1State);
      Serial.print("switch1 da MQTT: ");
      Serial.println(newSwitch1);
    }
    if (doc.containsKey("switch2")) {
      bool newSwitch2 = doc["switch2"];
      setSwitchState(SWITCH2_PIN, newSwitch2, switch2State);
      Serial.print("switch2 da MQTT: ");
      Serial.println(newSwitch2);
    }
    if (doc.containsKey("switch3")) {
      bool newSwitch3 = doc["switch3"];
      setSwitchState(SWITCH3_PIN, newSwitch3, switch3State);
      Serial.print("switch3 da MQTT: ");
      Serial.println(newSwitch3);
    }
    if (doc.containsKey("switch4")) {
      bool newSwitch4 = doc["switch4"];
      setSwitchState(SWITCH4_PIN, newSwitch4, switch4State);
      Serial.print("switch4 da MQTT: ");
      Serial.println(newSwitch4);
    }

  } else {
    Serial.print("Errore di deserializzazione JSON: ");
    Serial.println(error.c_str());
  }
}

/*****************************************************/
/*               FUNZIONE DI INVIO DATI              */
/*****************************************************/
void sendData() {
  if (!client.connected()) {
    reconnectMQTT();
  }

  // Costruiamo JSON telemetria
  StaticJsonDocument<512> doc;
  doc["water_level_percent"] = waterLevelPercent;
  doc["input1"]              = digitalRead(INPUT1_PIN);
  doc["input2"]              = digitalRead(INPUT2_PIN);
  doc["input3"]              = digitalRead(INPUT3_PIN);
  doc["input4"]              = digitalRead(INPUT4_PIN);
  doc["switch1"]             = switch1State;
  doc["switch2"]             = switch2State;
  doc["switch3"]             = switch3State;
  doc["switch4"]             = switch4State;
  doc["dht_temp"]            = dhtTemperature;
  doc["dht_hum"]             = dhtHumidity;
  doc["rssi_db"]             = WiFi.RSSI();
  doc["ssid"]                = WiFi.SSID();
  doc["ip"]                  = WiFi.localIP().toString();

  // **Invio versione firmware**
  doc["firmware_version"] = firmwareVersion;

  // Serializziamo
  char buffer[512];
  size_t n = serializeJson(doc, buffer);

  // Pubblicazione
  if (client.publish(TELEMETRY_TOPIC, buffer, n)) {
    Serial.println("Dati inviati con successo");
  } else {
    Serial.println("Invio dati fallito");
  }
}

/*****************************************************/
/*           FUNZIONE PER LETTURA HC-SR04            */
/*****************************************************/
void readUltrasonicSensor() {
  const int numReadings = 5;
  long totalDuration = 0;
  int validReadings = 0;

  for (int i = 0; i < numReadings; i++) {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    long currentDuration = pulseIn(ECHO_PIN, HIGH, 30000); // Timeout 30 ms
    if (currentDuration > 0) {
      totalDuration += currentDuration;
      validReadings++;
    }
    delay(10);
  }

  if (validReadings > 0) {
    duration = totalDuration / validReadings;
    distance = duration * 0.034 / 2; // formula cm
  } else {
    Serial.println("Nessun eco ricevuto");
    distance = tankHeight; 
  }

  // Calcolo percentuale di riempimento
  waterLevelPercent = ((tankHeight - distance) / tankHeight) * 100.0;
  waterLevelPercent = constrain(waterLevelPercent, 0.0, 100.0);

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Level: ");
  Serial.print(waterLevelPercent);
  Serial.println(" %");
}

/*****************************************************/
/*        FUNZIONE PER LETTURA DHT (TEMP & UMID)     */
/*****************************************************/
void readDHTSensor() {
  float t = dht.readTemperature();
  float h = dht.readHumidity();

  if (isnan(t) || isnan(h)) {
    Serial.println("Errore lettura DHT11");
    dhtTemperature = -127.0;
    dhtHumidity    = -1.0;
  } else {
    dhtTemperature = t;
    dhtHumidity    = h;
    Serial.print("Temp: ");
    Serial.print(dhtTemperature);
    Serial.print(" C, Umid: ");
    Serial.print(dhtHumidity);
    Serial.println(" %");
  }
}

/*****************************************************/
/*          FUNZIONE PER SWITCH ON/OFF               */
/*****************************************************/
void setSwitchState(int pin, bool state, bool &stateVar) {
  digitalWrite(pin, state ? HIGH : LOW);
  stateVar = state;
}

/*****************************************************/
/*           PAGINA HTML PRINCIPALE                  */
/*****************************************************/
String getHTMLPage() {
  auto statusDot = [](bool state) -> String {
    String color = state ? "green" : "red";
    return "<span class='status-dot' style='background-color:" + color + ";'></span>";
  };

  // Iniziamo l'HTML
  String html = R"rawliteral(
  <!DOCTYPE html>
  <html lang="it">
  <head>
      <meta charset="UTF-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Configurazione Powernet Omnia</title>
      <style>
          body {
              font-family: Arial, sans-serif;
              background-color: #f0f0f0;
              display: flex;
              justify-content: center;
              align-items: center;
              flex-direction: column;
              margin: 0;
              padding: 20px;
          }
          .container {
              background-color: #fff;
              padding: 20px 30px;
              border-radius: 10px;
              box-shadow: 0 4px 8px rgba(0,0,0,0.2);
              max-width: 600px;
              width: 100%;
              margin-bottom: 20px;
          }
          h2 {
              text-align: center;
              color: #333;
              margin-top: 0;
          }
          .token {
              background-color: #e7f3fe;
              border-left: 6px solid #2196F3;
              padding: 10px;
              margin-bottom: 20px;
              word-wrap: break-word;
          }
          label {
              display: block;
              margin-bottom: 8px;
              color: #555;
          }
          input[type=number] {
              width: 100%;
              padding: 10px;
              margin-bottom: 20px;
              border: 1px solid #ccc;
              border-radius: 5px;
              box-sizing: border-box;
          }
          button {
              width: 100%;
              padding: 10px;
              background-color: #4CAF50;
              color: white;
              border: none;
              border-radius: 5px;
              cursor: pointer;
              font-size: 16px;
              margin-bottom: 10px;
          }
          button:hover {
              background-color: #45a049;
          }
          .switch-container {
              margin-top: 20px;
              border-top: 1px solid #ccc;
              padding-top: 20px;
          }
          .switch-container h3 {
              margin: 0 0 10px 0;
              text-align: center;
          }
          .switch-state {
              display: flex;
              align-items: center;
              justify-content: space-between;
              margin: 5px 0 15px;
              font-weight: bold;
          }
          .status-dot {
              display: inline-block;
              width: 15px;
              height: 15px;
              border-radius: 50%;
              margin-left: 10px;
          }
          footer {
              text-align: center;
              margin-top: 20px;
              color: #555;
              font-size: 12px;
              line-height: 1.5;
          }
          .upload-container {
              margin-top: 20px;
              border-top: 1px solid #ccc;
              padding-top: 20px;
              text-align: center;
          }
      </style>
  </head>
  <body>
      <div class="container">
          <div style="text-align:center; margin-bottom:20px;">
              <img src="https://static.wixstatic.com/media/64ffab_a4006984a795460085d22ad4f7c90a1a~mv2.png/v1/fill/w_54,h_49,al_c,q_85,usm_0.66_1.00_0.01,enc_avif,quality_auto/Logo%20PoW.png" alt="Logo">
          </div>
          <h2>Configurazione Powernet Omnia</h2>
          <div class="token">
              <strong>ID Dispositivo:</strong><br>
  )rawliteral";

  // Inseriamo il token
  html += THINGSBOARD_TOKEN;
  html += R"rawliteral(
          </div>
  )rawliteral";

  // SSID, IP
  html += "<p><strong>SSID:</strong> " + WiFi.SSID() + "</p>";
  html += "<p><strong>IP Address:</strong> " + WiFi.localIP().toString() + "</p>";

  // MQTT server status
  html += "<p><strong>Connessione SERVER:</strong> " 
       + String(client.connected() ? "<span class='status-dot' style='background-color:green;'></span>" 
                                   : "<span class='status-dot' style='background-color:red;'></span>")
       + "</p>";

  // Stato ingressi
  html += "<p><strong>Stato Ingressi:</strong><br>";
  html += "Ingresso1: " + statusDot(digitalRead(INPUT1_PIN)) + "<br>";
  html += "Ingresso2: " + statusDot(digitalRead(INPUT2_PIN)) + "<br>";
  html += "Ingresso3: " + statusDot(digitalRead(INPUT3_PIN)) + "<br>";
  html += "Ingresso4: " + statusDot(digitalRead(INPUT4_PIN)) + "</p>";

  // Intervallo
  html += "<p><strong>Intervallo Invio Dati:</strong> " + String(interval / 1000) + " secondi</p>";

  // DHT
  html += "<p><strong>Temperatura DHT11:</strong> " + String(dhtTemperature) + " &deg;C<br>";
  html += "<strong>Umidit&agrave; DHT11:</strong> " + String(dhtHumidity) + " %</p>";

  // Mostra la versione firmware
  html += "<p><strong>Firmware Version:</strong> " + firmwareVersion + "</p>";

  // Form per altezza serbatoio
  html += R"rawliteral(
          <form action="/setTankHeight" method="POST">
              <label for="tankHeight">Imposta Altezza Serbatoio (10 - 400 cm):</label>
              <input type="number" id="tankHeight" name="tankHeight" min="10" max="400" required>
              <button type="submit">Salva Altezza</button>
          </form>
  )rawliteral";

  // Controllo switch
  html += R"rawliteral(
          <div class="switch-container">
              <h3>Controllo Switch</h3>
  )rawliteral";

  auto statusDotHTML = [&](bool st) {
    return "<span class='status-dot' style='background-color:" + String(st ? "green" : "red") + ";'></span>";
  };

  html += "<div class='switch-state'>Switch1: " + statusDotHTML(switch1State) + " <a href='/toggleSwitch1'>Toggle</a></div>";
  html += "<div class='switch-state'>Switch2: " + statusDotHTML(switch2State) + " <a href='/toggleSwitch2'>Toggle</a></div>";
  html += "<div class='switch-state'>Switch3: " + statusDotHTML(switch3State) + " <a href='/toggleSwitch3'>Toggle</a></div>";
  html += "<div class='switch-state'>Switch4: " + statusDotHTML(switch4State) + " <a href='/toggleSwitch4'>Toggle</a></div>";

  // Form di upload firmware
  html += R"rawliteral(
          </div>
          <div class="upload-container">
              <h3>Carica nuovo firmware</h3>
              <form method='POST' action='/update' enctype='multipart/form-data'>
                  <input type='file' name='update' accept='.bin,.bin.gz'>
                  <button type='submit'>Aggiorna Firmware</button>
              </form>
          </div>
      </div>
      <footer>
          <p>
          Powernet SRL - ROC 25294 - REA 317484 - P.IVA 06387880823<br>
          Sede Legale - PALERMO (PA) VIA MARIANO STABILE 105 CAP 90139<br>
          Sede Operativa Capaci - Via Sant' Erasmo 37 Capaci, PA 90040<br>
          SDI: M5UXCR1 - PEC: powernetsrls@pec.it
          </p>
      </footer>
  </body>
  </html>
  )rawliteral";

  return html;
}

/*****************************************************/
/*   HANDLER POST PER /setTankHeight (web server)    */
/*****************************************************/
void handleSetTankHeight(AsyncWebServerRequest *request) {
  if (request->hasParam("tankHeight", true)) {
    String tankHeightStr = request->getParam("tankHeight", true)->value();
    float newTankHeight = tankHeightStr.toFloat();

    if (newTankHeight >= 10 && newTankHeight <= 400) {
      tankHeight = newTankHeight;
      preferences.begin("tank", false);
      preferences.putFloat("height", tankHeight);
      preferences.end();
      Serial.print("tankHeight impostato da Web: ");
      Serial.println(tankHeight);

      String response = "<!DOCTYPE html><html><head><meta http-equiv='refresh' content='3;url=/'></head>"
                        "<body><h3>Altezza Serbatoio aggiornata a " + tankHeightStr + " cm.</h3>"
                        "<p>Reindirizzamento alla pagina principale...</p></body></html>";
      request->send(200, "text/html", response);
    } else {
      String response = "<!DOCTYPE html><html><head><meta http-equiv='refresh' content='3;url=/'></head>"
                        "<body><h3>Valore non valido! Inserisci un valore tra 10 e 400 cm.</h3>"
                        "<p>Reindirizzamento alla pagina principale...</p></body></html>";
      request->send(400, "text/html", response);
    }
  } else {
    request->send(400, "text/html", "Parametro mancante");
  }
}

/*****************************************************/
/*  GESTIONE UPLOAD FIRMWARE VIA PAGINA PRINCIPALE   */
/*****************************************************/
void handleFirmwareUpload(AsyncWebServerRequest *request, const String& filename,
                          size_t index, uint8_t *data, size_t len, bool final) {
  if(!index){
    Serial.printf("Update Start: %s\n", filename.c_str());
    if(!Update.begin(UPDATE_SIZE_UNKNOWN)){
      Update.printError(Serial);
    }
  }
  if(!Update.hasError()){
    if(Update.write(data, len) != len){
      Update.printError(Serial);
    }
  }
  if(final){
    if(Update.end(true)){
      Serial.printf("Update Success: %uB\n", index+len);
    } else {
      Update.printError(Serial);
    }
  }
}

/*****************************************************/
/*           FUNZIONE PER SETUP OTA (Arduino)        */
/*****************************************************/
void setupOTA() {
  ArduinoOTA.onStart([]() {
    String type = (ArduinoOTA.getCommand() == U_FLASH) ? "sketch" : "filesystem";
    Serial.println("Inizio aggiornamento " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nAggiornamento terminato");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    float percent = (progress / (float)total) * 100;
    Serial.printf("Progress: %.2f%%\r", percent);
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Errore OTA: %u\n", error);
  });
  // Hostname opzionale
  ArduinoOTA.setHostname("ESP32_TankSensor");
}
